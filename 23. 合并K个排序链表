
/*

合并 k 个排序链表，返回合并后的排序链表。请分析和描述算法的复杂度。

示例:

输入:
[
  1->4->5,
  1->3->4,
  2->6
]
输出: 1->1->2->3->4->4->5->6

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/merge-k-sorted-lists
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */


// 两个两个，逐一合并
/*
class Solution {
public:

    ListNode* _mergeKLists(ListNode* a, ListNode* b)
    {
        if(a==nullptr)
            return b;
        if(b==nullptr)
            return a;

        ListNode* tmp=new ListNode(0);
        ListNode* head=tmp;
        while(a&&b)
        {
            if(a->val<b->val)
            {
                head->next=a;
                a=a->next;
            }
            else
            {
                head->next=b;
                b=b->next;
            }
            head=head->next;
        }
        if(a)
            head->next=a;
        if(b)
            head->next=b;
        return tmp->next;
    }

    ListNode* mergeKLists(vector<ListNode*>& lists) {
        ListNode* tmp=nullptr;
        for(int i=0;i<lists.size();++i)
        {
            tmp=_mergeKLists(tmp,lists[i]);
        }
        return tmp;
    }
};
*/


// 分治算法
/*
class Solution {
public:
    ListNode* _2_mergeKLists(ListNode* a, ListNode* b)
    {
        if(a==nullptr)
            return b;
        if(b==nullptr)
            return a;

        ListNode* tmp=new ListNode(0);
        ListNode* head=tmp;
        while(a&&b)
        {
            if(a->val<b->val)
            {
                head->next=a;
                a=a->next;
            }
            else
            {
                head->next=b;
                b=b->next;
            }
            head=head->next;
        }
        if(a)
            head->next=a;
        if(b)
            head->next=b;
        return tmp->next;
    }

    ListNode* _1_mergeKLists(vector<ListNode*>& lists,int l,int r)
    {
        if(l==r)
            return lists[l];
        if(l>r)
            return nullptr;
        
        int mid=l+(r-l)/2;
        return _2_mergeKLists(_1_mergeKLists(lists,l,mid), _1_mergeKLists(lists,mid+1,r));
    }
    
    ListNode* mergeKLists(vector<ListNode*>& lists)
    {
        return _1_mergeKLists(lists,0,lists.size()-1);
    }
};
*/



// 优先级队列

class Solution {
public:
    struct status
    {
        int val;
        ListNode* list;
        bool operator<(const status& tmp) const
        {
            return val>tmp.val;
        }
    };

    ListNode* mergeKLists(vector<ListNode*>& lists) 
    {
        priority_queue<status> p;
        ListNode* res=new ListNode(0);
        ListNode* cur=res;
        for(auto& e:lists)
        {
            if(e)
                p.push({e->val,e});
        }

        while(!p.empty())
        {
            auto first=p.top();
            p.pop();

            cur->next=first.list;
            cur=cur->next;

            if(first.list->next)
                p.push({first.list->next->val,first.list->next});
        }
        return res->next;
    }
};