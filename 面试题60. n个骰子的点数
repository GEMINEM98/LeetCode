
/*

把n个骰子扔在地上，所有骰子朝上一面的点数之和为s。输入n，打印出s的所有可能的值出现的概率。

 

你需要用一个浮点数数组返回答案，其中第 i 个元素代表这 n 个骰子所能掷出的点数集合中第 i 小的那个的概率。

 

示例 1:

输入: 1
输出: [0.16667,0.16667,0.16667,0.16667,0.16667,0.16667]

示例 2:

输入: 2
输出: [0.02778,0.05556,0.08333,0.11111,0.13889,0.16667,0.13889,0.11111,0.08333,0.05556,0.02778]

 

限制：

1 <= n <= 11

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/nge-tou-zi-de-dian-shu-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

class Solution {
public:
    vector<double> twoSum(int n) {
        vector<vector<int>> vv(12,vector<int>(72,0));//一行表示n个筛子，共6*n列表示点数和
        for(int j=1;j<=6;++j) //先把一个筛子的情况写出来，后面筛子直接推导
        {
            vv[1][j]=1;
        }

        for(int i=2;i<=n;++i) //i个筛子
        {
            for(int j=i;j<=6*i;++j) //i个筛子最小点数和就是j=i，最大点数和是j=6*i
            {
                for(int cur=1;cur<=6;++cur) //cur是当前筛子的点数
                {
                    if(j-cur<=0) //此时表示当前筛子上面没有点数，错误
                        break;
                    
                    //单单看第 i 枚骰子，它的点数可能为 1 , 2, 3, ... , 6
                    //因此投掷完 i 枚骰子后点数 j 出现的次数，可以由投掷完 i−1枚骰子后，
                    //对应点数 j−1,j−2,j−3,...,j−6出现的次数之和转化过来。
                    vv[i][j]+=vv[i-1][j-cur];
                }
            }
        }
        vector<double> res;
        double tmp=pow(6,n);
        for(int i=n;i<=6*n;++i)
        {
            res.push_back(vv[n][i]/tmp);
        }
        return res;

    }
};
