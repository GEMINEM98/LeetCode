
/*

给定一个字符串，逐个翻转字符串中的每个单词。

 

示例 1：

输入: "the sky is blue"
输出: "blue is sky the"

示例 2：

输入: "  hello world!  "
输出: "world! hello"
解释: 输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。

示例 3：

输入: "a good   example"
输出: "example good a"
解释: 如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。

 

说明：

    无空格字符构成一个单词。
    输入字符串可以在前面或者后面包含多余的空格，但是反转后的字符不能包括。
    如果两个单词间有多余的空格，将反转后单词间的空格减少到只含一个。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/reverse-words-in-a-string
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

class Solution {
public:
    string reverseWords(string s) 
    {
        int l=0;
        for(int i=0;i<s.size();++i)
        {
            while(s[i]==' '&&i<s.size())
                ++i; //找到第一个非空格的字符
            if(i==s.size()) //当最后一个单词走完后，i走的是字符串后面的空格
                break;

            int j=i;
            while(s[j]!=' '&&j<s.size())
                ++j; //找到一个单词的最后一个字符

            reverse(s.begin()+i,s.begin()+j);//翻转一个单词

            if(l!=0)//当字符串中存在有效单词字符时，每个单词后面应该空格相隔
            {
                s[l++]=' ';
            }
            while(i<j)
            {
                s[l++]=s[i++];//有效单词的覆盖
            }
        }
        s.erase(s.begin()+l,s.end());
        reverse(s.begin(),s.end());

        return s;
    }
};