typedef int STDataType;
typedef struct Stack
{
	STDataType* _a;//栈
	size_t _top;//栈顶
	size_t _capacity;//容量
}Stack;

void StackInit(Stack* ps);// 初始化
void StackDestory(Stack* ps);// 销毁
void StackPush(Stack* ps, STDataType x);// 入栈
void StackPop(Stack* ps);// 出栈
int StackTop(Stack* ps);// 取栈顶元素
bool StackEmpty(Stack* ps);// 判栈空
int StackSize(Stack* ps);// 栈大小

void StackInit(Stack* ps)// 初始化
{
	assert(ps);
	ps->_a = NULL;
	ps->_capacity = 0;
	ps->_top = 0;
}

void StackDestory(Stack* ps)// 销毁
{
	assert(ps);
	if (ps->_a != NULL)
	{
		free(ps->_a);
		ps->_a = NULL;
		ps->_top = 0;
		ps->_capacity = 0;
	}
}

void StackPush(Stack* ps, STDataType x)// 入栈
{
	assert(ps);
	if (ps->_capacity == ps->_top)
	{
		size_t newcapacity = ps->_capacity == 0 ? 2 : ps->_capacity * 2;
		ps->_a = (STDataType*)realloc(ps->_a, sizeof(STDataType)*newcapacity);
		ps->_capacity = newcapacity;
	}
	ps->_a[ps->_top] = x;
	ps->_top++;
}

void StackPop(Stack* ps)// 出栈，删除
{
	assert(ps&&ps->_top > 0);
	--ps->_top;// 直接挪动下标即可
}

int StackTop(Stack* ps)// 取栈顶元素
{
	assert(ps&&ps->_top > 0);
	return (ps->_a[ps->_top - 1]);
}

bool StackEmpty(Stack* ps)// 判栈空
{
	assert(ps);
	return ps->_top == 0;// 看下标是否为0
}

int StackSize(Stack* ps)// 栈大小
{
	assert(ps);
	return ps->_top;// 下标表示几个元素
}


//************************************************


typedef struct MinStack
{
    Stack st;
    Stack min_st;
} MinStack;

/** initialize your data structure here. */

MinStack* minStackCreate() 
{
    MinStack* stack=(MinStack*)malloc(sizeof(MinStack));
    StackInit(&stack->st);
    StackInit(&stack->min_st);
    return stack;
}

void minStackPush(MinStack* obj, int x) // 最小栈入栈
{
    StackPush(&obj->st,x);
    if(StackEmpty(&obj->min_st)||x<=StackTop(&obj->min_st))
    {
        StackPush(&obj->min_st,x);
    }
}

void minStackPop(MinStack* obj) // 出栈，删除栈顶元素
{
    if(StackTop(&obj->st)>StackTop(&obj->min_st))
    {
        StackPop(&obj->st);
    }
    else
    {
        StackPop(&obj->st);
        StackPop(&obj->min_st);
    }
}

int minStackTop(MinStack* obj)//获取栈顶元素
{
    return StackTop(&obj->st);
}

int minStackGetMin(MinStack* obj) // 检索栈中的最小元素
{
    return StackTop(&obj->min_st);
}

void minStackFree(MinStack* obj)
{
    StackDestory(&obj->st);
    StackDestory(&obj->min_st);
    free(obj);
}

/**
 * Your MinStack struct will be instantiated and called as such:
 * MinStack* obj = minStackCreate();
 * minStackPush(obj, x);
 
 * minStackPop(obj);
 
 * int param_3 = minStackTop(obj);
 
 * int param_4 = minStackGetMin(obj);
 
 * minStackFree(obj);
*/
