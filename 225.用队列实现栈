
typedef int QUDataType;
typedef struct QueueNode
{
	struct QueueNode* _next;
	QUDataType _data;
}QueueNode;

typedef struct Queue
{
	QueueNode* _front;// 队头
	QueueNode* _tail;// 队尾
}Queue;

void QueueInit(Queue* pq);//初始化
void QueueDestory(Queue* pq);//销毁
QueueNode* BuyQueueNode(QUDataType x);//建立新结点
void QueuePush(Queue* pq, QUDataType x);//入队列
void QueuePop(Queue* pq);//按顺序删除
QUDataType QueueFront(Queue* pq);//返回头结点的值
QUDataType QueueBack(Queue* pq);//返回尾结点的值
bool QueueEmpty(Queue* pq);//判队列是否为空
int QueueSize(Queue* pq);//队列大小

void QueueInit(Queue* pq)//初始化
{
	assert(pq);
	pq->_front = NULL;
	pq->_tail = NULL;
}

void QueueDestory(Queue* pq)//销毁
{
	QueueNode* cur = pq->_front;
	while (cur)
	{
		QueueNode* next = cur->_next;
		free(cur); 
		cur = next;
	}
	pq->_front = NULL;
	pq->_tail = NULL;
}

QueueNode* BuyQueueNode(QUDataType x)//建立新结点
{
	QueueNode* newnode = (QueueNode*)malloc(sizeof(QueueNode));
	newnode->_data = x;
	newnode->_next = NULL;
	return newnode;
}

void QueuePush(Queue* pq, QUDataType x)//入队列
{
	assert(pq);
	QueueNode* newnode = BuyQueueNode(x);
	if (pq->_tail == NULL)
	{
		pq->_front = pq->_tail = newnode;
	}
	else
	{
		pq->_tail->_next = newnode;
		pq->_tail = newnode;
	}
}

void QueuePop(Queue* pq)//按顺序删除
{
	assert(pq&&pq->_front != NULL);
	QueueNode* next = pq->_front->_next;
	free(pq->_front);
	pq->_front = next;
	if (pq->_front == NULL)
	{
		pq->_tail = NULL;
	}
}

QUDataType QueueFront(Queue* pq)//返回头结点的值
{
	assert(pq&&pq->_front != NULL);
	return pq->_front->_data;
}

QUDataType QueueBack(Queue* pq)//返回尾结点的值
{
	assert(pq&&pq->_tail != NULL);
	return pq->_tail->_data;
}

bool QueueEmpty(Queue* pq)//判队列是否为空
{
	assert(pq);
	return pq->_front == NULL;
}

int QueueSize(Queue* pq)//队列大小
{
	assert(pq);
	size_t count = 0;
	QueueNode* cur = pq->_front;
	while (cur != NULL)
	{
		++count;
		cur = cur->_next;
	}
	return count;
}

//*******************************************

typedef int STDataType;
typedef struct MyStack
{
    Queue queue1;
    Queue queue2;
} MyStack;

/** Initialize your data structure here. */

MyStack* myStackCreate() 
{
    MyStack* stack=(MyStack*)malloc(sizeof(MyStack));
    QueueInit(&stack->queue1);    
    QueueInit(&stack->queue2);
    return stack;
}

/** Push element x onto stack. */
void myStackPush(MyStack* obj, int x) // 入栈
{
    if(!QueueEmpty(&obj->queue1))// 谁不空，谁入数据
    {
        QueuePush(&obj->queue1,x);
    }
    else
    {
        QueuePush(&obj->queue2,x);
    }
}

/** Removes the element on top of the stack and returns that element. */
int myStackPop(MyStack* obj) //出栈
{
    Queue* full_queue=&obj->queue1;// 暂存非空队列
    Queue* empty_queue=&obj->queue2;// 暂存空队列
    
    if(!QueueEmpty(&obj->queue2))
    {
        full_queue=&obj->queue2;
        empty_queue=&obj->queue1;
    }
    
    while(QueueSize(full_queue)>1)
    {
        QueuePush(empty_queue,QueueFront(full_queue));
        QueuePop(full_queue);
    }
    int front=QueueFront(full_queue);    
    QueuePop(full_queue);
    return front;
}

/** Get the top element. */
int myStackTop(MyStack* obj) // 返回栈顶元素
{
    Queue* full_queue=&obj->queue1;// 暂存非空队列
    Queue* empty_queue=&obj->queue2;// 暂存空队列
    
    if(!QueueEmpty(&obj->queue2))
    {
        full_queue=&obj->queue2;
        empty_queue=&obj->queue1;
    }
    
    while(QueueSize(full_queue)>1)
    {
        QueuePush(empty_queue,QueueFront(full_queue));
        QueuePop(full_queue);
    }
    int front=QueueFront(full_queue);    
    QueuePush(empty_queue,front);
    QueuePop(full_queue);
    return front;
}

/** Returns whether the stack is empty. */
bool myStackEmpty(MyStack* obj) 
{
    return QueueEmpty(&obj->queue1)&&QueueEmpty(&obj->queue2);
}

void myStackFree(MyStack* obj) 
{
    QueueDestory(&obj->queue1);
    QueueDestory(&obj->queue2);
    return 0;
}

/**
 * Your MyStack struct will be instantiated and called as such:
 * MyStack* obj = myStackCreate();
 * myStackPush(obj, x);
 
 * int param_2 = myStackPop(obj);
 
 * int param_3 = myStackTop(obj);
 
 * bool param_4 = myStackEmpty(obj);
 
 * myStackFree(obj);
*/
