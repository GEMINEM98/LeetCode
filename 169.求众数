
//先排序，再判断中间数在数组中出现的次数是否大于数组长度的一半
class Solution {
public:
    int majorityElement(vector<int>& nums)
    {
        sort(nums.begin(),nums.end());
        int count=0;
        int tmp=nums.size()/2;
        for(int i=0;i<nums.size();++i)
        {
            if(nums[i]==nums[tmp])
            {
                count++;
            }
        }
        if(count>tmp)
            return nums[tmp];
        return 0;
    }
    
};


/*

//勉强对了，但是不靠谱
class Solution {
public:
    int majorityElement(vector<int>& nums) 
    {
        sort(nums.begin(),nums.end()); //先排序
        if(nums.size()==1)
            return nums[0];
        if(nums.size()%2==0)    //偶数个数
        {
            if(nums[nums.size()/2]!=nums[nums.size()/2-1])
                return 0;
            else return nums[nums.size()/2];
        }
        else                   //奇数个数
        {
            if(nums[nums.size()/2]!=nums[nums.size()/2+1]&&nums[nums.size()/2]!=nums[nums.size()/2-1])
                return 0;
            else return nums[nums.size()/2];
        }
    }
};
*/
