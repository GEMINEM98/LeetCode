
/*

 n 名士兵站成一排。每个士兵都有一个 独一无二 的评分 rating 。

每 3 个士兵可以组成一个作战单位，分组规则如下：

    从队伍中选出下标分别为 i、j、k 的 3 名士兵，他们的评分分别为 rating[i]、rating[j]、rating[k]
    作战单位需满足： rating[i] < rating[j] < rating[k] 或者 rating[i] > rating[j] > rating[k] ，其中  0 <= i < j < k < n

请你返回按上述条件可以组建的作战单位数量。每个士兵都可以是多个作战单位的一部分。

 

示例 1：

输入：rating = [2,5,3,4,1]
输出：3
解释：我们可以组建三个作战单位 (2,3,4)、(5,4,1)、(5,3,1) 。

示例 2：

输入：rating = [2,1,3]
输出：0
解释：根据题目条件，我们无法组建作战单位。

示例 3：

输入：rating = [1,2,3,4]
输出：4

 

提示：

    n == rating.length
    1 <= n <= 200
    1 <= rating[i] <= 10^5

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/count-number-of-teams
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

// class Solution {
// public:
//     int numTeams(vector<int>& rating) {
//         int res=0;
//         int sz=rating.size();
//         for(int i=0;i<sz;++i)
//         {
//             for(int j=i+1;j<sz;++j)
//             {
//                 for(int k=j+1;k<sz;++k)
//                 {
//                     if((rating[i] < rating[j]&&rating[j] < rating[k])||(rating[i] > rating[j]&&rating[j] > rating[k]))
//                         ++res;
//                 }
//             }
//         }
//         return res;
//     }
// };



/*
假设：

出现在位置 j 左侧且比 j 评分低的士兵数量 iless

出现在位置 j 左侧且比 j 评分高的士兵数量 imore

出现在位置 j 右侧且比 j 评分低的士兵数量 kless

出现在位置 j 右侧且比 j 评分高的士兵数量 kmore

以 j 为中间点的三元组的数量为：

res = iless∗kmore + imore∗kless


*/
class Solution {
public:
    int numTeams(vector<int>& rating) {
        int res=0;
        for(int j=1;j<rating.size()-1;++j)
        {
            int iless=0;
            int imore=0;
            int kless=0;
            int kmore=0;
            for(int i=0;i<j;++i)
            {
                if(rating[i]<rating[j])
                    iless++;
                if(rating[i]>rating[j])
                    imore++;
            }
            for(int k=j+1;k<rating.size();++k)
            {
                if(rating[j]<rating[k])
                    kmore++;
                if(rating[j]>rating[k])
                    kless++;
            }
            res+=iless*kmore+imore*kless;
        }
        return res;
    }
};


