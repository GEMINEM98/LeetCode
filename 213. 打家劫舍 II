
/*

你是一个专业的小偷，计划偷窃沿街的房屋，每间房内都藏有一定的现金。这个地方所有的房屋都围成一圈，这意味着第一个房屋和最后一个房屋是紧挨着的。同时，相邻的房屋装有相互连通的防盗系统，如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警。

给定一个代表每个房屋存放金额的非负整数数组，计算你在不触动警报装置的情况下，能够偷窃到的最高金额。

示例 1:

输入: [2,3,2]
输出: 3
解释: 你不能先偷窃 1 号房屋（金额 = 2），然后偷窃 3 号房屋（金额 = 2）, 因为他们是相邻的。

示例 2:

输入: [1,2,3,1]
输出: 4
解释: 你可以先偷窃 1 号房屋（金额 = 1），然后偷窃 3 号房屋（金额 = 3）。
     偷窃到的最高金额 = 1 + 3 = 4 。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/house-robber-ii
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

class Solution {
public:
    int rob(vector<int>& nums) 
    {
        if(nums.empty())
            return 0;
        if(nums.size()==1)
            return nums[0];
        if(nums.size()==2)
            return max(nums[0],nums[1]);

        //环形，可将房间分为：
        //偷第一个房间，不偷最后一个房间；
        //不偷第一个房间，偷最后一个房间。

        int max1=0;
        int max2=0;
        max1=func(nums,0,nums.size()-2);//参数是下标
        max2=func(nums,1,nums.size()-1);
        return max(max1,max2);
    }
    /*通过改变nums中的值，算出结果
    int func(vector<int> nums,int l,int r)
    {
        //先算出前两个数据
        nums[l]=nums[l];
        nums[l+1]=max(nums[l],nums[l+1]);
        //再算后面的数据
        for(int i=l+2;i<=r;++i)
        {
            nums[i]=max(nums[i-2]+nums[i],nums[i-1]);
        }
        return nums[r];
    }
    */
    //或者，通过三个变量互相转换，算出结果
    int func(vector<int>& nums,int l,int r)
    {
        int pp=0;
        int p=nums[l];
        int cur=0;
        for(int i=l+1;i<=r;++i)
        {
            cur=max(pp+nums[i],p);
            pp=p;
            p=cur;
        }
        return cur;
    }
};