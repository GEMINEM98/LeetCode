
/*

请实现一个函数按照之字形顺序打印二叉树，即第一行按照从左到右的顺序打印，第二层按照从右到左的顺序打印，第三行再按照从左到右的顺序打印，其他行以此类推。

 

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

返回其层次遍历结果：

[
  [3],
  [20,9],
  [15,7]
]

 

提示：

    节点总数 <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-iii-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    // 用两个队列和一个vector
    // 一个队列用来存结点，另一个队列用来存结点的层数，vector用来存结果，层数相当于vector的下标

    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        if(root==nullptr)
            return {};

        queue<TreeNode*> node; // 存结点
        queue<int> level; // 存结点的层数，相当于下标
        vector<vector<int>> res; // 根据上面两个队列，存入结点

        node.push(root);  // 先将根结点入队列
        level.push(0);    // 将根结点的层数入队列

        while(!node.empty()) // 判断条件是：结点队列还有结点
        {
            TreeNode* cur=node.front(); // 取出队列第一个结点
            node.pop();

            int l=level.front(); // 取出对应结点的下标
            level.pop();

            if(l>=res.size()) // 当结果vector不够时，进行增容
                res.push_back(vector<int>());

            if(l%2==0) // 这是之字形的从左向右存，直接push_back到后面就行
                res[l].push_back(cur->val);
            else       // 这是之字形的从右向左存，用insert存到vector的最前面
                res[l].insert(res[l].begin(),cur->val);

            if(cur->left) // 将当前结点的左孩子入两个队列
            {
                node.push(cur->left);
                level.push(l+1);
            }

            if(cur->right) // 将当前结点的右孩子入两个队列
            {
                node.push(cur->right);
                level.push(l+1);
            }
        }
        return res;
    }
};