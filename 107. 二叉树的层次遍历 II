
/*
思路：
用队列遍历二叉树的每一层结点，将每一层结点存入一维vector中，再将一维vector存入二维vector中。

*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrderBottom(TreeNode* root) 
    {
        queue<TreeNode*> q;
        vector<vector<int>> vv;
        if(root==NULL)    // 判断空树
            return vv;

        q.push(root);
        while(!q.empty())
        {
            int sz=q.size();
            vector<int> v;
            while(sz--)       // 将每一层的结点放进一维vector中
            {
                TreeNode* cur=q.front();
                v.push_back(cur->val);
                q.pop();

                if(cur->left)           // 左右子树入队列
                    q.push(cur->left);
                if(cur->right)
                    q.push(cur->right);
            }
            vv.push_back(v);   // 将每一层的结点存入二维vector
        } 
        reverse(vv.begin(),vv.end());  // 倒序排列
        return vv;
    }
};
