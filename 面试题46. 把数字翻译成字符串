
/*

给定一个数字，我们按照如下规则把它翻译为字符串：0 翻译成 “a” ，1 翻译成 “b”，……，11 翻译成 “l”，……，25 翻译成 “z”。一个数字可能有多个翻译。请编程实现一个函数，用来计算一个数字有多少种不同的翻译方法。

 

示例 1:

输入: 12258
输出: 5
解释: 12258有5种不同的翻译，分别是"bccfi", "bwfi", "bczi", "mcfi"和"mzi"

 

提示：

    0 <= num < 231

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ba-shu-zi-fan-yi-cheng-zi-fu-chuan-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

class Solution {
public:
    int translateNum(int num) {
        if(num<=9)
            return 1;

        // 1、存num的每一位：
        vector<int> v;
        while(num)
        {
            v.push_back(num%10);
            num/=10;
        }
        reverse(v.begin(),v.end());
        
        // 2、先把dp的前两个空初始化：
        vector<int> dp(v.size(),1);
        int tmp=v[0]*10+v[1];
        if(tmp>=10&&tmp<=25)
            dp[1]=dp[0]+dp[1];

        // 3、根据前两个空，填写后面的空：
        for(int i=2;i<v.size();++i)
        {
            int tmp=v[i-1]*10+v[i];

            // 两个数字能够组合成一个字母:
            // 能够组合在一起，还要确定是否和前一位合在一起翻译，那么有两种情况：
            // 如果前一位不为0，不合:dp[i-1]，合:dp[i-2]；则：dp[i]=dp[i-1]+dp[i-2]。
            // 如果前一位为0，则：dp[i] = dp[i - 1]。
            if(tmp>=10&&tmp<=25)
                dp[i]=dp[i-2]+dp[i-1]; 
                
            // 两个数字不能组合成一个字母:
            //后面的数字只能单独翻译，并不影响前面数字翻译的方法数，只是将后面的数字添加到前面的每个方法中。
            else  
                dp[i]=dp[i-1]; 

        }

        // 4、返回最后的种类
        return dp[v.size()-1];
    }

    /*
    // 递归
    int translateNum(int num) 
    {
        if (num<=9) 
            return 1;

        int tmp = num%100;
        if (tmp<=9||tmp>=26)     // 09 08 07 ... 这些就不能构成一个新字母，不像 17 18 19 ... 这些；26以上没有字母。
            return translateNum(num/10);
        else  
            return translateNum(num/10)+translateNum(num/100);
    }
    */
};