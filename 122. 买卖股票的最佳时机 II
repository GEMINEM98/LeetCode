
/*

思路：
根据题意，可以进行多次交易，先买，卖了之后才能继续买卖，算出最大利润。
画图，可以看出每次的收益累计起来，相当于波峰波谷之差。

和121题的区别就是，122是多次收益之和最大；121是一次性的收益最大。

*/


class Solution {                           // 取到价格波动图像的波峰波谷之差
public:
    int maxProfit(vector<int>& prices) 
    {
        int maxprofit=0;
        for(int i=1;i<prices.size();++i)
        {
            if(prices[i]>prices[i-1])
                maxprofit+=(prices[i]-prices[i-1]);
				
	     // maxprofit+=max(prices[i]-prices[i-1],0);
        }
        return maxprofit;
    }
};


/*

class Solution {                           // DP
public:
    int maxProfit(vector<int>& prices) 
    {
        if (prices.size() < 2) 
            return 0;

        vector<vector<int>> dp(prices.size(),vector<int>(2));
        dp[0][0]=0;             // 二维数组的第一列表示持有现金
        dp[0][1]=0-prices[0];   // 第二列表示持有股票

        for (int i=1; i<prices.size(); ++i) 
        {
            // 今天持有的现金最多 = 前一天的现金 与 前一天的股票今天卖了后的钱 之间的max
            dp[i][0]=max(dp[i - 1][0], dp[i - 1][1] + prices[i]); 
            
            // 今天持有股票价值最大 = 前一天的股票今天不卖 与 前一天的现金今天买股票 之间的max
            dp[i][1]=max(dp[i - 1][1], dp[i - 1][0] - prices[i]);
        }
        return dp[prices.size()-1][0]; // 返回的是收益，也就是现金
    }
};

*/
