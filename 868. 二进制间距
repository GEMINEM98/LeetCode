
/*
思路：
一次遍历，遍历N的各个位的时候，记录两个连续1的位置，计算跨度，取最大
*/

/*
class Solution {
public:
    int binaryGap(int N) 
    {
        int tmp=-1;    // 记录减数1的位置(较低位的1)
        int maxnum=0;  // 记录连续两个1之间的最大跨度
        for(int i=0;i<32;++i)  // 遍历N的每一位，从低位到高位遍历
        {
            if((N>>i)&1!=0)    // 当下标是i的这一位的值是1时
            {
                if(tmp>=0)     // 找到被减数1(较高位的1)
                {
                    maxnum=max(maxnum,i-tmp);
                }
                tmp=i;  // 记录低位1，找高位1
            }
        }
        return maxnum;
    }
};
*/


/*
思路：
先用while循环将整数的每一位的数字用数组记录下来，便于循环遍历；
用for循环找到跨度最大的两个连续1，输出跨度；
*/

class Solution {
public:
    int binaryGap(int N) 
    {
        int a[32]={0};   
        int i=0;
        while(i<32)        // 记录N的各个位，倒序记录
        {
            a[i]=(N>>i)&1;
            ++i;
        }

        int tmp=-1;        // 记录被减数的那个1的位置
        int maxnum=0;
        for(int j=0;j<32;++j)
        {
            if(tmp<0&&a[j]==1)  // 记录被减数的那个1的位置(每对连续1中第一个1的位置)
                tmp=j;
            else if(a[j]==1)      // 找到减数的那个1的位置(每对连续1中第二个1的位置)
            {
                maxnum=max(j-tmp,maxnum);  // 找到最大的跨度
                tmp=j;
            }
        }
        return maxnum;
    }
};
