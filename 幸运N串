
/*

链接：https://www.nowcoder.com/questionTerminal/3d08b635346d4610b01c6256bc07c394
来源：牛客网

小A很喜欢字母N，他认为连续的N串是他的幸运串。有一天小A看到了一个全部由大写字母组成的字符串，他被允许改变最多2个大写字母（也允许不改变或者只改变1个大写字母），使得字符串中所包含的最长的连续的N串的长度最长。你能帮助他吗？

输入描述:

输入的第一行是一个正整数T（0 < T <= 20），表示有T组测试数据。对于每一个测试数据包含一行大写字符串S（0 < |S| <= 50000，|S|表示字符串长度）。

数据范围：

20%的数据中，字符串长度不超过100；

70%的数据中，字符串长度不超过1000；

100%的数据中，字符串长度不超过50000。



输出描述:

对于每一组测试样例，输出一个整数，表示操作后包含的最长的连续N串的长度。

示例1
输入

3
NNTN
NNNNGGNNNN
NGNNNNGNNNNNNNNSNNNN

输出

4
10
18

*/

#include<iostream>
#include<vector>
#include<string>
#include<algorithm>
#include<stdlib.h>
using namespace std;

int func(string s)
{
	if (s.length() == 1)
		return 1;
	if (s.length() == 2)
		return 2;

	int flag1 = -1;
	int flag2 = -1;
	if (s[0] != 'N')
		flag1 = 0;
	if (s[1] != 'N')
	{
		if (flag1 == -1)
			flag1 = 1;
		else flag2 = 1;
	}

	int l = 0;
	int r = 2;
	vector<int> v;
	while (l < r && r < s.length())
	{
		if (s[r] != 'N')
		{
			if (flag1 != -1 && flag2 != -1)
			{
				v.push_back(r - l);
				l = flag1 + 1;
				flag1 = flag2;
				flag2 = r;
			}
			else if (flag1 != -1)
				flag2 = r;
			else if (flag1 == -1)
				flag1 = r;
		}
		++r;
	}
	v.push_back(r - l);
	sort(v.begin(), v.end());
	return v[v.size()-1];
}

int main()
{
	int n = 0;
	cin >> n;
	vector<string> v;
	string s = "";
	while (n--)
	{
		cin >> s;
		v.push_back(s);
	}

	for (int i = 0; i < v.size(); ++i)
	{
		cout << func(v[i]) << endl;
	}
	system("pause");
	return 0;
}