
/*

从扑克牌中随机抽5张牌，判断是不是一个顺子，即这5张牌是不是连续的。2～10为数字本身，A为1，J为11，Q为12，K为13，而大、小王为 0 ，可以看成任意数字。A 不能视为 14。

 

示例 1:

输入: [1,2,3,4,5]
输出: True

 

示例 2:

输入: [0,0,1,2,5]
输出: True

 

限制：

数组长度为 5 

数组的数取值为 [0, 13] .

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/bu-ke-pai-zhong-de-shun-zi-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/*
1、先将数组排好序；
2、找出0的个数；
3、遍历0后面的数组元素；
   遍历的时候，如果两个元素的差不是1，就用0的个数来补齐：个数-1，前面的元素+1，再和后面的数字继续比较；
   如果已经没有0了，相邻两个数之间差值不是1，就直接返回false；否则返回true。
*/

class Solution {
public:
    bool isStraight(vector<int>& nums) 
    {
        sort(nums.begin(),nums.end());

        int count=0;
        int i=0;
        while(nums[i]==0)
        {
            ++count;
            ++i;
        }

        for(int i=count;i<nums.size()-1;)
        {
            if(nums[i]+1!=nums[i+1])
            {
                if(count<=0)
                    return false;
                --count;
                nums[i]+=1;
            }
            else
                ++i;
        }
        return true;
    }
};