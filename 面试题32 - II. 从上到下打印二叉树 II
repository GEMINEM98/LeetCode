
/*

从上到下按层打印二叉树，同一层的节点按从左到右的顺序打印，每一层打印到一行。

 

例如:
给定二叉树: [3,9,20,null,null,15,7],

    3
   / \
  9  20
    /  \
   15   7

返回其层次遍历结果：

[
  [3],
  [9,20],
  [15,7]
]

 

提示：

    节点总数 <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/cong-shang-dao-xia-da-yin-er-cha-shu-ii-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> levelOrder(TreeNode* root) 
    {
        vector<vector<int>> res;
        queue<TreeNode*> q;  // 存放每一层的结点
        queue<int> level_q;  // 存放第几层

        if(root==nullptr)
            return res;
        
        q.push(root);
        level_q.push(0);

        while(!q.empty())
        {
            TreeNode* flag=q.front(); // 取出第一个结点
            q.pop();
            int index=level_q.front();// 取出第一个层数
            level_q.pop();

            if(index>=res.size()) // 如果res二维数组中的空间不足，需要开辟一个新数组
                res.push_back(vector<int>());
            res[index].push_back(flag->val);
            
            if(flag->left)
            {
                q.push(flag->left);
                level_q.push(index+1);
            }
            if(flag->right)
            {
                q.push(flag->right);
                level_q.push(index+1);
            }
        }
        return res;
    }
};