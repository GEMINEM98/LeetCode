
/*

给定一个 没有重复 数字的序列，返回其所有可能的全排列。

示例:

输入: [1,2,3]
输出:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/permutations
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

class Solution {
public:

    // 可重复回溯中，筛选不可重复

    void _permute(vector<vector<int>>& vv,vector<int>& nums,vector<int>& v)
    {
        if(v.size()==nums.size())  // 结束条件
        {    
            vv.push_back(v);
            return;
        }
        for(int i=0;i<nums.size();++i)
        {
            if(find(v.begin(),v.end(),nums[i])==v.end())  // 去重，保证v中没有重复的元素
            {
                v.push_back(nums[i]); // 做选择
                _permute(vv,nums,v);  // 回溯
                v.pop_back();  // 取消选择
            }
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        vector<vector<int>> vv;
        vector<int> v;
        _permute(vv,nums,v);  // 可重复回溯，不用添加层数
        return vv;
    }
};