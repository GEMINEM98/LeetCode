
/*

给定一个整数数组和一个整数 k，你需要找到该数组中和为 k 的连续的子数组的个数。

示例 1 :

输入:nums = [1,1,1], k = 2
输出: 2 , [1,1] 与 [1,1] 为两种不同的情况。

说明 :

    数组的长度为 [1, 20,000]。
    数组中元素的范围是 [-1000, 1000] ，且整数 k 的范围是 [-1e7, 1e7]。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/subarray-sum-equals-k
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

class Solution {
public:
     int subarraySum(vector<int>& nums, int k) {
        int res=0;  // 返回结果
        int sz=nums.size();
        for(int i=0;i<sz;++i)
        {
            int sum=0;
            for(int j=i;j<sz;++j)  
            {
                sum+=nums[j]; 

                if(sum==k)
                    ++res;
            }
        }
        return res;
    }


// // 评论区做法：
//     int subarraySum(vector<int>& nums, int k) {

//         // 如果一个区间[left,right]符合值为k，
//         // 那么则意味着累加到right的值 减去 累加到left的值 等于 k
//         // 所以我们可以想，如果要找到有多少个符合k的区间,
//         // 只需要确定right累积值 - k 在之前出现了多少次！

//         unordered_map<int,int> um;
//         um[0]=1;
//         int res=0;
//         int sum=0; // 记录序列和
//         for(int i=0;i<nums.size();++i)
//         {
//             sum+=nums[i];
//             if(um.find(sum-k)!=um.end())
//                 res+=um[sum-k];
//             um[sum]++;
//         }
//         return res;
//     }
 };
