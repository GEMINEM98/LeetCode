
/*

给你一个 m * n 的矩阵，矩阵中的数字 各不相同 。请你按 任意 顺序返回矩阵中的所有幸运数。

幸运数是指矩阵中满足同时下列两个条件的元素：

    在同一行的所有元素中最小
    在同一列的所有元素中最大

 

示例 1：

输入：matrix = [[3,7,8],[9,11,13],[15,16,17]]
输出：[15]
解释：15 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。

示例 2：

输入：matrix = [[1,10,4,2],[9,3,8,7],[15,16,17,12]]
输出：[12]
解释：12 是唯一的幸运数，因为它是其所在行中的最小值，也是所在列中的最大值。

示例 3：

输入：matrix = [[7,8],[1,2]]
输出：[7]

 

提示：

    m == mat.length
    n == mat[i].length
    1 <= n, m <= 50
    1 <= matrix[i][j] <= 10^5
    矩阵中的所有元素都是不同的

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/lucky-numbers-in-a-matrix
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

class Solution {
public:
    vector<int> luckyNumbers (vector<vector<int>>& matrix) {
        vector<int> res1;
        for(int i=0;i<matrix.size();++i)
        {
            int minnum=INT_MAX;
            for(int j=0;j<matrix[0].size();++j)
            {
                minnum=min(minnum,matrix[i][j]);
            }
            res1.push_back(minnum);
        }
        vector<int> res2;
        for(int i=0;i<matrix[0].size();++i)
        {
            int maxnum=INT_MIN;
            for(int j=0;j<matrix.size();++j)
            {
                maxnum=max(maxnum,matrix[j][i]);
            }
            res2.push_back(maxnum);
        }
        vector<int> res;
        for(int i=0;i<res1.size();++i)
        {
            if(find(res2.begin(),res2.end(),res1[i])!=res2.end())
                res.push_back(res1[i]);
        }
        return res;
    }
};