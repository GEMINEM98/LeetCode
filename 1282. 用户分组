
/*

有 n 位用户参加活动，他们的 ID 从 0 到 n - 1，每位用户都 恰好 属于某一用户组。给你一个长度为 n 的数组 groupSizes，其中包含每位用户所处的用户组的大小，请你返回用户分组情况（存在的用户组以及每个组中用户的 ID）。

你可以任何顺序返回解决方案，ID 的顺序也不受限制。此外，题目给出的数据保证至少存在一种解决方案。

 

示例 1：

输入：groupSizes = [3,3,3,3,3,1,3]
输出：[[5],[0,1,2],[3,4,6]]
解释： 
其他可能的解决方案有 [[2,1,6],[5],[0,4,3]] 和 [[5],[0,6,2],[4,3,1]]。

示例 2：

输入：groupSizes = [2,1,3,3,3,2]
输出：[[1],[0,5],[2,3,4]]

 

提示：

    groupSizes.length == n
    1 <= n <= 500
    1 <= groupSizes[i] <= n

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/group-the-people-given-the-group-size-they-belong-to
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/*

用两个二维数组vv和res：vv是中间的过渡数组，res是返回结果的数组。
    将用户ID作为vv的下标，开辟最大500个数组空间，将其在原数组中的下标存入vv中；以此类推；
    如果vv中的某个ID下标数组满了，就将该ID下标数组存入res中，并且将其清空；后面相同ID下标数组的用户下标就可以存入该ID下标数组中。

*/

class Solution {
public:
    vector<vector<int>> groupThePeople(vector<int>& groupSizes) {
        vector<vector<int>> vv(500,vector<int>());
        vector<vector<int>> res;
        for(int i=0;i<groupSizes.size();++i)
        {
            vv[groupSizes[i]].push_back(i);
            if(vv[groupSizes[i]].size()==groupSizes[i])
            {    
                res.push_back(vv[groupSizes[i]]);
                vv[groupSizes[i]].clear();
            }
        }
        return res;
    }
};