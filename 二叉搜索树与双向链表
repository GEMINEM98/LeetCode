
/*

题目描述
输入一棵二叉搜索树，将该二叉搜索树转换成一个排序的双向链表。要求不能创建任何新的结点，只能调整树中结点指针的指向。
https://www.nowcoder.com/practice/947f6eb80d944a84850b0538bf0ec3a5?tpId=13&&tqId=11179&rp=1&ru=/activity/oj&qru=/ta/coding-interviews/question-ranking

*/

/*
struct TreeNode {
	int val;
	struct TreeNode *left;  // prev
	struct TreeNode *right;  // next
	TreeNode(int x) :
			val(x), left(NULL), right(NULL) {
	}
};*/
class Solution {
public:
    
    void _Convert(TreeNode* cur,TreeNode*& prev)
    {
        if(cur==nullptr)
            return;
        
        _Convert(cur->left,prev);
        
        //通过prev中序遍历中cur的前一个结点，中序出来正好是有序的，并且改prev和cur之间的链接关系
        
        if(prev)
        {
            prev->right=cur;
            cur->left=prev;
        }
        prev=cur;
        
        _Convert(cur->right,prev);
        
    }
    TreeNode* Convert(TreeNode* pRootOfTree)
    {
        if(pRootOfTree==nullptr)
            return pRootOfTree;
        
        TreeNode* prev=nullptr;
        _Convert(pRootOfTree,prev);
        
        //找链表的头结点，向左走，也就是向前走。
        TreeNode* head=pRootOfTree;
        while(head->left)
        {
            head=head->left;
        }
        return head;
    }
};