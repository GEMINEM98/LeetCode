
/*

给你一根长度为 n 的绳子，请把绳子剪成整数长度的 m 段（m、n都是整数，n>1并且m>1），每段绳子的长度记为 k[0],k[1]...k[m-1] 。请问 k[0]*k[1]*...*k[m-1] 可能的最大乘积是多少？例如，当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到的最大乘积是18。

示例 1：

输入: 2
输出: 1
解释: 2 = 1 + 1, 1 × 1 = 1

示例 2:

输入: 10
输出: 36
解释: 10 = 3 + 3 + 4, 3 × 3 × 4 = 36

提示：

    2 <= n <= 58

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/jian-sheng-zi-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/*

如果剪开位置为k，则区间分为[0, k)和[k, i)两部分
第一部分长度为k, 第二部分长度为i-k
第二部分存在剪和不剪两种情况，剪的时候值为dp[i-k]，不剪的时候取(i-k)
于是得到状态转换方程：
dp[i] = max( k * dp[i-k], k * (i-k)) (2<=k<=i)

*/


class Solution {
public:
    int cuttingRope(int n) {
        vector<int> dp(n+1, 0);
        dp[1] = 1;
        dp[2] = 1;
        
        for (int i = 3; i<=n; i++){
            for (int k = 2; k <= i-1; k++){
                dp[i] = max(dp[i], max(k*(i-k), k*dp[i-k]));
            }
        }
        return dp[n];
    }
};