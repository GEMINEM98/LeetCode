
/*

链接：https://www.nowcoder.com/questionTerminal/02e7cc263f8a49e8b1e1dc9c116f7602
来源：牛客网

对于两个字符串，请设计一个时间复杂度为O(m*n)的算法(这里的m和n为两串的长度)，求出两串的最长公共子串的长度。这里的最长公共子串的定义为两个序列U1,U2,..Un和V1,V2,...Vn，其中Ui + 1 == Ui+1,Vi + 1 == Vi+1，同时Ui == Vi。

给定两个字符串A和B，同时给定两串的长度n和m。
测试样例：

"1AB2345CD",9,"12345EF",7

返回：4

*/

class LongestSubstring {
public:
    int findLongest(string A, int n, string B, int m) {
        // write code here
        vector<vector<int>> vv(n+1,vector<int>(m+1,0));
        for(int i=1;i<n+1;++i)
        {
            for(int j=1;j<m+1;++j)
            {
                if(A[i-1]==B[j-1])
                {
                    vv[i][j]=vv[i-1][j-1]+1;
                }
            }
        }
        int res=0;
        for(int i=1;i<n+1;++i)
        {
            for(int j=1;j<m+1;++j)
            {
                res=max(res,vv[i][j]);
            }
        }
        return res;
    }
};