
/*

给定一棵二叉树，设计一个算法，创建含有某一深度上所有节点的链表（比如，若一棵树的深度为 D，则会创建出 D 个链表）。返回一个包含所有深度的链表的数组。

 

示例：

输入：[1,2,3,4,5,null,7,8]

        1
       /  \ 
      2    3
     / \    \ 
    4   5    7
   /
  8

输出：[[1],[2,3],[4,5,7],[8]]

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/list-of-depth-lcci
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> listOfDepth(TreeNode* tree) {
        
        if(tree==nullptr)
            return {};
        
        vector<ListNode*> res;  //存结果
        queue<TreeNode*> node;  //存结点

        node.push(tree);

        while(!node.empty())
        {
            int sz=node.size();  //每一层的结点个数
            ListNode* head=nullptr;  //记录每一层的第一个结点
            ListNode* cur=head;  //记录每一层的所有结点
            while(sz--)
            {
                TreeNode* tmp=node.front();
                node.pop();
                if(!cur)
                {
                    cur=new ListNode(tmp->val);
                    head=cur;
                }
                else
                {
                    cur->next=new ListNode(tmp->val);
                    cur=cur->next;
                }

                if(tmp->left)
                {
                    node.push(tmp->left);
                }
                if(tmp->right)
                {
                    node.push(tmp->right);
                }
            }
            res.push_back(head);
        }
        return res;
    }
};