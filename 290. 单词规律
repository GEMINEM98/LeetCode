
/*

给定一种规律 pattern 和一个字符串 str ，判断 str 是否遵循相同的规律。

这里的 遵循 指完全匹配，例如， pattern 里的每个字母和字符串 str 中的每个非空单词之间存在着双向连接的对应规律。

示例1:

输入: pattern = "abba", str = "dog cat cat dog"
输出: true

示例 2:

输入:pattern = "abba", str = "dog cat cat fish"
输出: false

示例 3:

输入: pattern = "aaaa", str = "dog cat cat dog"
输出: false

示例 4:

输入: pattern = "abba", str = "dog dog dog dog"
输出: false

说明:
你可以假设 pattern 只包含小写字母， str 包含了由单个空格分隔的小写字母。    

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/word-pattern
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

class Solution {
public:
    bool wordPattern(string pattern, string str) {
        unordered_map<char,string> p;//不排序，去重
        unordered_map<string,char> s;

        //将str中的单词提出来，放进数组中
        string tmp="";
        vector<string> v;
        str+=' ';
        for(int i=0;i<str.length();++i)
        {
            if(str[i]!=' ')
                tmp+=str[i];
            else
            {
                v.push_back(tmp);
                tmp="";
            }
        }

        //判断元素个数
        if(pattern.length()!=v.size())
            return false;

        //判断映射关系
        for(int i=0;i<pattern.length();++i)  //把映射关系分别存放进unordered_map中
        {
            p[pattern[i]]=v[i];
            s[v[i]]=pattern[i];
        }
        for(int i=0;i<pattern.length();++i)  //在两个映射关系中，找对应的关系是否一一对应
        {
            if(p[pattern[i]]!=v[i]||s[v[i]]!=pattern[i])
                return false;
        }
        return true;
    }
};
