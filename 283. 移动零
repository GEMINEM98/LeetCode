
/*

给定一个数组 nums，编写一个函数将所有 0 移动到数组的末尾，同时保持非零元素的相对顺序。

示例:

输入: [0,1,0,3,12]
输出: [1,3,12,0,0]

说明:

    必须在原数组上操作，不能拷贝额外的数组。
    尽量减少操作次数。

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/move-zeroes
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

// class Solution {
// public:
//     void moveZeroes(vector<int>& nums) {
//         int cur=0;   //更新后的数组下标
//         for(int i=0;i<nums.size();++i)
//         {
//             if(nums[i]!=0)
//             {
//                 nums[cur]=nums[i];
//                 ++cur;
//             }
//         }
//         while(cur<nums.size())
//         {
//             nums[cur]=0;
//             ++cur;
//         }
//         return;
//     }
// };


class Solution {
public:
    void moveZeroes(vector<int>& nums) {
        int j=0;  //记录数组第一个0的位置，方便i遍历的时候与之交换。
        for(int i=1;i<nums.size();++i)
        {
            if(nums[j]==0&&nums[i]!=0)
            {
                int tmp=nums[i];
                nums[i]=nums[j];  //  [0,1,0,3,12]
                nums[j]=tmp;
                if(i!=j+1)  // 比如：1  3  0  0  12  ==>  1  3  0  0  12
                    ++j;    //         j      i                j  i
                else        // 比如：1  0  0  3  12  ==>  1  0  0  3  12
                    j=i;    //      j  i                    ji
            }
            else if(nums[j]!=0)  // 比如：1  0  0  3  12  ==>  1  0  0  3  12
                j=i;             //      j  i                    ji
        }
        return;
    }
};