
/*

在一个 n * m 的二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。

 

示例:

现有矩阵 matrix 如下：

[
  [1,   4,  7, 11, 15],
  [2,   5,  8, 12, 19],
  [3,   6,  9, 16, 22],
  [10, 13, 14, 17, 24],
  [18, 21, 23, 26, 30]
]

给定 target = 5，返回 true。

给定 target = 20，返回 false。

 

限制：

0 <= n <= 1000

0 <= m <= 1000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/er-wei-shu-zu-zhong-de-cha-zhao-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/


// /*
// 从右上角向左向下遍历，比该数小，向左走；比该数大，向下走。
// */
// class Solution {
// public:
//     bool findNumberIn2DArray(vector<vector<int>>& matrix, int target) 
//     {
//         if(matrix.size()==0)
//             return false;
//         int m=matrix.size();
//         int n=matrix[0].size();
//         int i=0;
//         int j=n-1;
//         while(i<=m-1&&j>=0)
//         {
//             if(target==matrix[i][j])
//                 return true;
//             else if(target<matrix[i][j])
//                 --j;
//             else
//                 ++i;
//         }
//         return false;
//     }
// };

//二分
class Solution {
public:
    bool findNumberIn2DArray(vector<vector<int>>& matrix, int target) {
        if(matrix.size()==0||matrix[0].size()==0)
            return false;
        for(int i=0;i<matrix.size();++i)
        {
            int m=0,n=matrix[i].size()-1;
            while(m<n)
            {
                int mid=m+(n-m)/2;
                if(target>matrix[i][mid])
                    m=mid+1;
                else
                    n=mid;
            }
            if(target==matrix[i][m])
                return true;
        }
        return false;
    }
};

