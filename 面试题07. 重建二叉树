
/*

输入某二叉树的前序遍历和中序遍历的结果，请重建该二叉树。假设输入的前序遍历和中序遍历的结果中都不含重复的数字。

 

例如，给出

前序遍历 preorder = [3,9,20,15,7]
中序遍历 inorder = [9,3,15,20,7]

返回如下的二叉树：

    3
   / \
  9  20
    /  \
   15   7

 

限制：

0 <= 节点个数 <= 5000

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/zhong-jian-er-cha-shu-lcof
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。

*/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode(int x) : val(x), left(NULL), right(NULL) {}
 * };
 */
class Solution {
public:

    TreeNode* _buildTree(vector<int>& preorder, vector<int>& inorder,int& cur_root,int cur_left,int cur_right)
    {
        if(cur_left>cur_right)
            return nullptr;
        
        // 创建当前根结点
        TreeNode* newnode=new TreeNode(preorder[cur_root]);
        
        // 找出当前根节点的左子树
        int i=cur_left;
        while(i<=cur_right)
        {
            if(inorder[i]==preorder[cur_root])
                break;
            else ++i;
        }

        // 划分区间：[cur_left, i-1]   preorder[cur_root]   [i+1, cur_right]

        // 左子树：
        if(cur_left<=i-1)
            newnode->left=_buildTree(preorder,inorder,++cur_root,cur_left,i-1);
        else
            newnode->left=nullptr;

        // 右子树：
        if(i+1<=cur_right)
            newnode->right=_buildTree(preorder,inorder,++cur_root,i+1,cur_right);
        else
            newnode->right=nullptr;

        return newnode;
    }

    TreeNode* buildTree(vector<int>& preorder, vector<int>& inorder) 
    {
        int cur_root=0;
        int cur_left=0;
        int cur_right=inorder.size()-1;
        return _buildTree(preorder,inorder,cur_root,cur_left,cur_right);
    }
};