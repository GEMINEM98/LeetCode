

/*
思路：二分查找
先找出左边界，再找出右边界；
找左边界时，从右向左逼近；
找右边界时，从左向右逼近。
*/
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) 
    {
        vector<int> v(2,-1);
        int l=0;
        int r=nums.size()-1;
        int m=0;
        if(nums.size()==0)
            return v;
        
        while(l<r)    // 寻找左边界
        {
            m=l+(r-l)/2;
            if(nums[m]>=target)
                r=m;
            else l=m+1;
        }
        if(nums[l]!=target)
            return v;
        v[0]=l;

        r=nums.size();     // 寻找右边界
        while(l<r)    
        {
            m=l+(r-l)/2;
            if(nums[m]<=target)
                l=m+1;
            else r=m;
        }
        v[1]=l-1;
        return v;
    }
};



// 效率低
/*
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) 
    {
        int left=0;
        int right=nums.size()-1;
        while(left<=right)
        {
            if(nums[left]!=target)
                ++left;
            if(nums[right]!=target)
                --right;
            if(left<=right&&nums[left]==target&&nums[right]==target)
                return {left,right};
        }
        return {-1,-1};
    }
};
*/

/*
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int start=-1,end=-1;
        for(int i=0;i<nums.size();i++){
            if(start==-1&&nums[i]==target) start=i;
            if(nums[i]==target) end=i;
        }
        return {start,end};
    }
};
*/
