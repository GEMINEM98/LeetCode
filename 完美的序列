
/*

链接：https://www.nowcoder.com/questionTerminal/546b22232fd14997a10a8d2a7a158cbc
来源：牛客网

小易定义一个数字序列是完美的，当且仅当对于任意2≤i≤n2 \leq i \leq n2≤i≤n，都满足∑1≤j<iAj≤Ai\sum_{1 \leq j < i}{A_{j}} \leq A_{i}∑1≤j<i​Aj​≤Ai​，即每个数字都要大于等于前面所有数字的和。
现在给定数字序列AiA_{i}Ai​，小易想请你从中找出最长的一段连续子序列，满足它是完美的。

输入描述:

第一行数据组数T\mathit TT。对于每组数据，第一行一个整数n\mathit nn，接下来一行n\mathit nn个整数表示序列。
1≤n≤105,1≤T≤5,1≤Ai≤1091 \leq n \leq 10^5 , 1 \leq T \leq 5 , 1 \leq A_{i} \leq 10^91≤n≤105,1≤T≤5,1≤Ai​≤109



输出描述:

对于每组数据，一行一个数字表示最长完美的连续子序列的长度。

示例1
输入

2
5
1 3 9 2 6
5
4 2 9 16 7

输出

3
3

*/

#include<iostream>
#include<vector>
using namespace std;

int func(vector<int> v)
{
    int sum=v[0];
    int _count=1;
    int max_count=1;
    for(int i=1;i<v.size();++i)
    {
        if(v[i]>=sum)
        {
            sum+=v[i];
            ++_count;
        }
        else
        {
            sum=v[i];
            max_count=max(max_count,_count);
            _count=1;
        }
    }
    return max_count;
}

int main()
{
    int n=0;//一共几组序列
    cin >> n;
    vector<vector<int>> vv;
    for(int level=0;level<n;++level)
    {
        int num=0;
        cin >> num; // 这个序列几个元素
        vector<int> v;
        for(int i=0;i<num;++i)
        {
            int number=0; // 每个元素
            cin >> number;
            v.push_back(number);
        }
        vv.push_back(v);
    }
    for(int j=0;j<vv.size();++j)
    {
        cout << func(vv[j]) << endl;
    }
    return 0;
}